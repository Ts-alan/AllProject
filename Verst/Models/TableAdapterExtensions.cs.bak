using System;
using System.Collections.Generic;
using System.Data.OleDb;
using System.Linq;
using System.Web;

using System.Data;

using MvcApplication.Models.CrystalTableAdapters;
using System.Web.Mvc;

namespace MvcApplication.Models
{
    public enum Plants { plant43, plant47, plant12, plant20, bms, plant_none };

    public static class FoxRepo
    {
        public const string CONNECTION_STRING = "_ConnectionString";

        public static Plants GetPlant(Plants plant = Plants.plant_none)
        {
            string plant_name = plant.ToString();
            if (plant == Plants.plant_none)
                plant_name = HttpContext.Current.Request.RequestContext.RouteData.Values["plant"] as string;

            // Преобразование строки в перечисление. 
            Plants pl = Plants.plant_none;
            if (Enum.IsDefined(typeof(Plants), plant_name))
                pl = (Plants)Enum.Parse(typeof(Plants), plant_name, true);
            else
                throw new InvalidCastException(string.Format("Error PlantName\nCheck Plants enum for {0}", plant_name));
            return pl;
        }

        public static string GetConnection(Plants plant)
        {
            //string plant_name = GetPlant().ToString(); // HttpContext.Current.Request.RequestContext.RouteData.Values["plant"] as string;
            string expected_ConnectionString = plant.ToString().ToUpper() + CONNECTION_STRING;
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[expected_ConnectionString];
            if (connectionStringSettings == null)
            {
                throw new System.Configuration.ConfigurationErrorsException(string.Format("Error ConnectionString in Web.config\nExpected: {0}", expected_ConnectionString));
            }
            return connectionStringSettings.ConnectionString;
        }


        public static IEnumerable<T> GetTable<T>(bool ShowDeleted = false, Plants plant = Plants.plant_none, string filter = "") where T : global::System.Data.DataRow
        {
            Plants pl = GetPlant(plant);
            string db_name = typeof(T).Name;
            string plant_name = pl.ToString();

            Object data = HttpContext.Current.Cache.Get(plant_name + "_" + db_name);
            if (data != null) return data as IEnumerable<T>;

            dynamic ta = null; ;
            switch (db_name)
            {
                case "asbrakRow":ta = new asbrakTableAdapter();break;
                case "askorRow": ta = new askorTableAdapter(); break;
                case "asmnpRow": ta = new asmnpTableAdapter(); break;
                case "astobRow": ta = new astobTableAdapter(); break;
                case "assprRow": ta = new assprTableAdapter(); break;
                case "assuflRow": ta = new assuflTableAdapter(); break;
                case "asmbnRow": ta = new asmbnTableAdapter(); break;
                case "askuchRow": ta = new askuchTableAdapter(); break;
                case "as_wopRow": ta = new as_wopTableAdapter(); break;
                case "mpartnRow": ta = new mpartnTableAdapter(); break;
                case "ampartnRow": ta = new ampartnTableAdapter(); break;
                case "mprxopRow": ta = new mprxopTableAdapter(); break;
                case "astmrRow": ta = new astmrTableAdapter(); break;
                case "asksRow": ta = new asksTableAdapter(); break;
                case "assopRow": ta = new assopTableAdapter(); break;
                case "asabonRow": ta = new asabonTableAdapter(); break;
                case "mparttRow": ta = new mparttTableAdapter(); break;
                case "askrmRow": ta = new askrmTableAdapter(); break;
                case "amparttRow": ta = new amparttTableAdapter(); break;
                case "amprxopRow": ta = new amprxopTableAdapter(); break;
                case "asscpRow": ta = new asscpTableAdapter(); break;
                case "askprobRow": ta = new askprobTableAdapter(); break;
                case "asparamRow": ta = new asparamTableAdapter(); break;
                default: throw new InvalidCastException("Error TableRow");
            }

            (ta.Connection as IDbConnection).ConnectionString = GetConnection(pl);

            if (ShowDeleted) (ta.Connection as IDbConnection).ShowDeleted();

            IEnumerable<T> ret_data = (ta.GetData() as global::System.Data.TypedTableBase<T>).AsEnumerable();

            HttpContext.Current.Cache.Insert(plant_name + "_" + db_name, ret_data.ToArray(), null, System.Web.Caching.Cache.NoAbsoluteExpiration, TimeSpan.FromMinutes(180));

            return ret_data;
        }


        public static T GetTableFiltered<T>(string filter = "", params Object[] parameters) where T : global::System.Data.DataTable, new()
        {
            return GetTableNew<T>(filter: filter, parameters: parameters);
        }

        public static DataTable GetTableCustom(Plants plant, string sql, Object[] parameters, bool ShowDeleted = false)
        {
            DataTable t = new DataTable();
            Plants pl = plant;
            if (plant == Plants.plant_none)
            {
                pl = GetPlant();
            }


            using (IDbConnection dbConn = new OleDbConnection(GetConnection(pl)))
            {


                IDbCommand dbCmd = dbConn.CreateCommand();
                string selectCommand = sql;

                dbCmd.CommandText = selectCommand;
                if (parameters != null)
                {
                    foreach (var par in parameters)
                    {
                        if (par is OleDbParameter)
                        {
                            dbCmd.Parameters.Add(par);
                        }
                        else
                            dbCmd.Parameters.Add(new System.Data.OleDb.OleDbParameter("", par));
                    }

                }
                if (ShowDeleted) dbConn.ShowDeleted();
                dbConn.Open();
                t.Load(dbCmd.ExecuteReader());
                dbConn.Close();
            }
            return t;

        }

        public static DataTable GetTableCustom(string sql, params Object[] parameters)
        {
            return GetTableCustom(Plants.plant_none, sql, parameters);

        }

        public static T GetTableNew<T>(bool isArchived = false, bool ShowDeleted = false, Plants plant = Plants.plant_none, string filter = "", params Object[] parameters) where T : global::System.Data.DataTable, new()
        {
            Plants pl = GetPlant(plant);
            string plant_name = pl.ToString();

            DataTable tbl = new T();
            string db_name = tbl.TableName;
            if (isArchived)
            {
                db_name = "a" + db_name;
            }

            using (IDbConnection dbConn = new OleDbConnection(GetConnection(pl)))
            {
                IDbCommand dbCmd = dbConn.CreateCommand();
                string selectCommand = "select * from " + db_name;
                if (filter != "")
                {
                    selectCommand += (" " + filter);
                }
                dbCmd.CommandText = selectCommand;
                if (parameters != null)
                {
                    foreach (var par in parameters)
                    {
                        if (par is OleDbParameter)
                        {
                            dbCmd.Parameters.Add(par);
                        }
                        else
                            dbCmd.Parameters.Add(new System.Data.OleDb.OleDbParameter("", par));
                    }
                }
                if (ShowDeleted) dbConn.ShowDeleted();
                dbConn.Open();
                tbl.Load(dbCmd.ExecuteReader());
                dbConn.Close();
            }

            return (T)tbl;
        }


        public static double HoursBetween(DateTime dt_e, string time_e, DateTime dt_s, string time_s)
        {
            DateTime date_e;
            if (dt_e.isNullDate())
            {
                date_e = DateTime.Now;

            }
            else date_e = new DateTime(year: dt_e.Year, month: dt_e.Month, day: dt_e.Day, hour: int.Parse(time_e.Substring(0, 2)), minute: int.Parse(time_e.Substring(2, 2)), second: 0);
            DateTime date_s = new DateTime(year: dt_s.Year, month: dt_s.Month, day: dt_s.Day, hour: int.Parse(time_s.Substring(0, 2)), minute: int.Parse(time_s.Substring(2, 2)), second: 0);
            return date_e.Subtract(date_s).TotalHours;
        }

        public static double HoursBetweenForMZagr(DateTime dt_e, string time_e, DateTime dt_s, string time_s)//dt_e,time_e-конец;dt_s,time_s-начадо
        {
            DateTime date_e;
            DateTime date_s = DateTime.Now;
            if (dt_e.isNullDate())
            {
                date_e = DateTime.Now;

            }
            else
            {
                date_e = new DateTime(year: dt_e.Year, month: dt_e.Month, day: dt_e.Day, hour: int.Parse(time_e.Substring(0, 2)), minute: int.Parse(time_e.Substring(2, 2)), second: 0);
                if (dt_e.Month != dt_s.Month)
                    date_s = new DateTime(year: dt_e.Year, month: dt_e.Month, day: dt_e.Day, hour: 0, minute: 0, second: 0);
                else
                    date_s = new DateTime(year: dt_s.Year, month: dt_s.Month, day: dt_s.Day, hour: int.Parse(time_s.Substring(0, 2)), minute: int.Parse(time_s.Substring(2, 2)), second: 0);
            }
            return date_e.Subtract(date_s).TotalHours;
        }

        public static int WorkDaysBetween(DateTime start_date, DateTime end_date, IEnumerable<Crystal.askrmRow> calend)
        {
            return calend.Count(a => a.dm > start_date && a.dm <= end_date);
        }

        public static DateTime OneColDateTime(DateTime dato, String Timo)
        {
            DateTime DatoTimo;
            if (dato == DateTime.Parse("30/12/1899"))
            {
                DatoTimo = DateTime.Now;
            }
            else
            {
                DatoTimo = new DateTime(year: dato.Year, month: dato.Month, day: dato.Day, hour: int.Parse(Timo.Trim().Substring(0, 2)), minute: int.Parse(Timo.Trim().Substring(2, 2)), second: 0);
            }
            return DatoTimo;
        }

        public static string GetFIOByTabNumber(string tn, IEnumerable<Crystal.asabonRow> abons = null)
        {
            if (tn.Trim() == "") return "";
            if (abons == null) abons = FoxRepo.GetTable<Crystal.asabonRow>();
            var abonent = abons.Where(a => a.tbn == tn);
            return abonent.Count() > 0 ? abonent.First().fio : "удалён (" + tn + ")";
        }

        public static int WorkDaysInMonth(DateTime dt)
        {
            DateTime date_e = new DateTime(year: dt.Year, month: dt.Month, day: DateTime.DaysInMonth(dt.Year, dt.Month));
            DateTime date_s = new DateTime(year: dt.Year, month: dt.Month, day: 1);
            return WorkDaysBetween(date_s, date_e, FoxRepo.GetTable<Crystal.askrmRow>());
            //return FoxRepo.GetTable<Crystal.askrmRow>().Count(a => a.dm > date_s && a.dm < date_e);
        }

        public static string getFoxTime(string tim)
        {
            return tim != "    " ? tim.Substring(0, 2) + ":" + tim.Substring(2, 2) : "";//dt.isNullDate() ? "" : dt.ToShortDateString();// dt == DateTime.Parse("30/12/1899") ? true : false;
        }
    }


    public static class TableAdapterExtensions
    {

        public static void ShowDeleted(this IDbConnection conn)
        {
            conn.ConnectionString += "DELETED=FALSE;";
        }

        public static bool isNullDate(this DateTime dt)
        {
            return dt == DateTime.Parse("30/12/1899") ? true : false;
        }

        public static string getFoxDate(this DateTime dt)
        {
            return dt.isNullDate() ? "" : dt.ToShortDateString();// dt == DateTime.Parse("30/12/1899") ? true : false;
        }

        public static string getFoxTime(this string time)
        {
            return time != "    " ? time.Insert(2, ":") : "";
        }
    }

    public class PlantAuthorizationAttribute : AuthorizeAttribute
    {
        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            return base.AuthorizeCore(httpContext) && httpContext.User.IsInRole(FoxRepo.GetPlant().ToString());
        }
    }
}