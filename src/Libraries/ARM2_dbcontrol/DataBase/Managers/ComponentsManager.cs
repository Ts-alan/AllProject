using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ComponentEntity object.
    /// </summary>
    internal sealed class ComponentsManager
    {
        private readonly String connectionString;
        private readonly DbProviderFactory factory;

        #region Constructors
        public ComponentsManager(String connectionString):this(connectionString,"System.Data.SqlClient")
        {            
        }

        public ComponentsManager(String connectionString,String DbFactoryName):this(connectionString,DbProviderFactories.GetFactory(DbFactoryName))
        {            
        }

        public ComponentsManager(String connectionString, DbProviderFactory factory)
        {
            this.connectionString = connectionString;
            this.factory = factory;
            
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get component from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static ComponentsEntity GetComponentFromReader(IDataReader reader)
        {
            ComponentsEntity component = new ComponentsEntity();

            if (reader.GetValue(0) != DBNull.Value)
                component.ComputerName = reader.GetString(0);
            if (reader.GetValue(1) != DBNull.Value)
                component.ComponentName = reader.GetString(1);
            if (reader.GetValue(2) != DBNull.Value)
                component.ComponentState = reader.GetString(2);
            if (reader.GetValue(3) != DBNull.Value)
                component.Version = reader.GetString(3);
            if (reader.GetValue(4) != DBNull.Value)
                component.Name = reader.GetString(4);

            return component;
        }

        /// <summary>
        /// Get components from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static List<ComponentsEntity> GetComponentsFromReader(IDataReader reader)
        {
            List<ComponentsEntity> components = new List<ComponentsEntity>();

            while (reader.Read())
            {
                components.Add(GetComponentFromReader(reader));
            }

            return components;
        }

        /// <summary>
        /// Get page with sorting and filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <param name="order">order clause</param>
        /// <param name="page">page number</param>
        /// <param name="size">records per page</param>
        /// <returns></returns>
        internal List<ComponentsEntity> List(String where, String order, Int32 page, Int32 size)
        {

            using (IDbConnection con=factory.CreateConnection())
            {
                con.ConnectionString = connectionString;
                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.CommandText = "GetComponentsPage";
                cmd.CommandType = CommandType.StoredProcedure;

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@page";
                param.Value = page;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@rowcount";
                param.Value = size;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@orderby";
                param.Value = order;
                cmd.Parameters.Add(param);



                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComponentsEntity> list = GetComponentsFromReader(reader);
                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get component page for computer
        /// </summary>
        /// <param name="ID">Computer's ID</param>
        /// <returns>List of components</returns>
        internal List<ComponentsEntity> GetComponentsPageByComputerID(Int16 ID)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComponentsPageByComputerID";
                cmd.CommandType = CommandType.StoredProcedure;

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = ID;
                cmd.Parameters.Add(param);
                
                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComponentsEntity> list = GetComponentsFromReader(reader);
                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get count of records with filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <returns></returns>
        internal Int32 Count(String where)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComponentsCount";
                cmd.CommandType = CommandType.StoredProcedure;

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// Component types list
        /// </summary>
        /// <returns></returns>
        internal List<ComponentsEntity> ListComponentState()
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText ="GetComponentStateList";
                cmd.CommandType = CommandType.StoredProcedure;

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComponentsEntity> list = new List<ComponentsEntity>();
                while (reader.Read())
                {
                    ComponentsEntity cmpt = new ComponentsEntity();
                    cmpt.ComponentState = reader.GetString(0);
                    list.Add(cmpt);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Component types list
        /// </summary>
        /// <returns></returns>
        internal List<ComponentsEntity> ListComponentType()
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComponentTypeList";
                cmd.CommandType = CommandType.StoredProcedure;

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComponentsEntity> list = new List<ComponentsEntity>();
                while (reader.Read())
                {
                    ComponentsEntity cmpt = new ComponentsEntity();
                    cmpt.ComponentName = reader.GetString(0);
                    list.Add(cmpt);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get component settings 
        /// </summary>
        /// <param name="compID">Computer's ID</param>
        /// <param name="componentName">Component name</param>
        /// <returns>XML serializable settings</returns>
        internal String GetCurrentSettings(Int16 compID, String componentName)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComponentCurrentSettings";
                cmd.CommandType = CommandType.StoredProcedure;

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@compId";
                param.Value = compID;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@name";
                param.Value = componentName;
                cmd.Parameters.Add(param);


                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                String result = String.Empty;
                if (reader.Read())
                    if (reader.GetValue(1) != DBNull.Value)
                        result = reader.GetString(1);
                reader.Close();

                return result;
            }
        }
        
        #endregion
    }
}

