using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ComponentEntity object.
    /// </summary>
    internal sealed class UpdateManager
    {
        private readonly String connectionString;
        private readonly DbProviderFactory factory;

        #region Constructors
        public UpdateManager(String connectionString):this(connectionString,"System.Data.SqlClient")
        {            
        }

        public UpdateManager(String connectionString,String DbFactoryName):this(connectionString,DbProviderFactories.GetFactory(DbFactoryName))
        {            
        }
        public UpdateManager(String connectionString, DbProviderFactory factory)
        {
            this.connectionString = connectionString;
            this.factory = factory;
            
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get last update entity
        /// </summary>
        /// <param name="state">state</param>
        /// <returns></returns>
        internal UpdateEntity GetLast(UpdateStateEnum state)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetLastUpdate";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@State";
                param.Value = state.ToString();
                cmd.Parameters.Add(param);
               
                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                UpdateEntity ent = new UpdateEntity();
                if (reader.Read())
                {
                    if (reader.GetValue(0) != DBNull.Value)
                        ent.BuildID = reader.GetString(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        ent.DeployDatetime = reader.GetDateTime(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        ent.State = UpdateStateEnumExtensions.Get(reader.GetString(2));
                    if (reader.GetValue(3) != DBNull.Value)
                        ent.Description = reader.GetString(3);
                }
                reader.Close();
                return (ent.DeployDatetime == DateTime.MinValue) ? null : ent;
            }
        }

        /// <summary>
        /// Insert new update entity
        /// </summary>
        internal void InsertUpdate()
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "InsertUpdate";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@State";
                param.Value = UpdateStateEnum.Processing.ToString();
                cmd.Parameters.Add(param);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update fields for processing entity
        /// </summary>
        /// <param name="ent"></param>
        internal void Update(UpdateEntity ent)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateInsertedUpdate";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@DeployDatetime";
                param.Value = ent.DeployDatetime;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@State";
                param.Value = ent.State.ToString();
                cmd.Parameters.Add(param);

                param=cmd.CreateParameter();
                param.ParameterName="@Description";
                param.Value=ent.Description;
                cmd.Parameters.Add(param);
                
                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        #endregion
    }
}
