using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections;

namespace VirusBlokAda.RemoteOperations.RemoteInstall.MsiexecHelper
{
    /// <summary>
    /// Class used to parse log files generated by msiexec.
    /// </summary>
    class LogParser
    {
        /// <summary>
        /// Parses log file generated with msiexec and finds out the result of installation
        /// 0 success, 3010 need reboot success other - fail
        /// if log is not in english may be troubles
        /// </summary>
        /// <param name="logPath">Path of log file</param>
        /// <param name="exitCode">Exitcode of msiexec process</param>
        /// <returns>True if action was completed successfully</returns>
        public static bool GetCompletionInfo(string logPath, out int exitCode)
        {
            string returning = "MainEngineThread is returning ";
            FileStream fs = new FileStream(logPath, FileMode.Open, FileAccess.Read, System.IO.FileShare.ReadWrite);
            StreamReader sr = new StreamReader(fs);
            string logText = sr.ReadToEnd();

            int index = logText.LastIndexOf(returning) + returning.Length;
            if (index >= 0)
            {
                exitCode = ReadNextInt(logText, index);
                if (exitCode == 0 || exitCode == 3010)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                exitCode = -1;
                index = logText.LastIndexOf(" completed successfully.");
                if (index > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }



        }

        /// <summary>
        /// Reads next int in string starting from specified position
        /// </summary>
        /// <param name="s">String to process</param>
        /// <param name="startIndex">Starting index</param>
        /// <returns>Found int</returns>
        private static int ReadNextInt(string s, int startIndex)
        {
            int result = 0;
            int nextSymbol = 0;
            int index = startIndex;
            bool isNumber = true;
            while (isNumber)
            {
                isNumber = int.TryParse(s[index++].ToString(), out nextSymbol);
                if (isNumber)
                {
                    result = result * 10 + nextSymbol;
                }
            }
            return result;
        }
    }
}