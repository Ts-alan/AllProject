using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the EventsEntity object.
	/// </summary>
	public class EventsManager
	{
	
		VlslVConnection database; 
		
		#region Constructors
		public EventsManager()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public EventsManager(VlslVConnection l_database)
		{
			database=l_database;
		}
		#endregion
		
		
		#region Methods

        public List<EventsEntity> List(string where, string order, int page, int size)
		{
			IDbCommand command=database.CreateCommand("GetEventsPage",true);

			database.AddCommandParameter(command,"@page",
				DbType.Int32,(Int32)page,ParameterDirection.Input);

			database.AddCommandParameter(command,"@rowcount",
                DbType.Int32, (Int32)size, ParameterDirection.Input);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			database.AddCommandParameter(command,"@orderby",
				DbType.String,order,ParameterDirection.Input);

			SqlDataReader reader=command.ExecuteReader() as SqlDataReader;
            List<EventsEntity> list = new List<EventsEntity>();
			while(reader.Read())
			{
				EventsEntity events = new EventsEntity();
                if (reader.GetValue(0) != DBNull.Value)
                    events.ComputerName = reader.GetString(0);
				if(reader.GetValue(1)!= DBNull.Value)
					events.EventName = reader.GetString(1);
				if(reader.GetValue(2)!= DBNull.Value)
					events.Color = reader.GetString(2);
				if(reader.GetValue(3)!= DBNull.Value)
					events.ComponentName = reader.GetString(3);
				if(reader.GetValue(4)!= DBNull.Value)
					events.EventTime = reader.GetDateTime(4);
				if(reader.GetValue(5)!= DBNull.Value)
					events.Object = reader.GetString(5);
				if(reader.GetValue(6)!= DBNull.Value)
					events.Comment = reader.GetString(6);
                try
                {
                    if (reader.GetValue(7) != DBNull.Value)
                        events.IPAddress = reader.GetString(7);
                    if (reader.GetValue(8) != DBNull.Value)
                        events.Description = reader.GetString(8);
                }
                catch
                {
                    events.IPAddress = "-";
                    events.Description = "-";
                }
                
				list.Add(events);		
			}
			
			reader.Close();
			return list;
		}

        public List<StatisticEntity> GetStatistics(String groupBy, String where, Int32 size)
        {
            IDbCommand command = database.CreateCommand("GetStatistics", true);

            database.AddCommandParameter(command, "@OrderBy",
               DbType.String, groupBy, ParameterDirection.Input);

            database.AddCommandParameter(command, "@where",
                DbType.String, where, ParameterDirection.Input);

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;
            List<StatisticEntity> list = new List<StatisticEntity>();
            int i = 0;
            while (reader.Read())
            {
                i++;
                StatisticEntity stat = new StatisticEntity();
                if (reader.GetValue(0) != DBNull.Value)
                    stat.Name = reader.GetString(0);
                if (reader.GetValue(1) != DBNull.Value)
                    stat.Count = reader.GetInt32(1);
                list.Add(stat);
                if (i == size) break;
            }

            reader.Close();
            return list;
        }

		/// <summary>
		/// Get count of records with filter
		/// </summary>
		/// <param name="where">where clause</param>
		/// <returns></returns>
		public int Count(string where)
		{

            IDbCommand command = database.CreateCommand("GetEventsCount", true);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);


			return (int)command.ExecuteScalar();
		}
		
		#endregion
	
		
	}		
}

