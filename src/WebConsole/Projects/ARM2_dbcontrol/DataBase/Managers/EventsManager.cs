using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the EventsEntity object.
	/// </summary>
    internal sealed class EventsManager
	{
        private readonly String connectionString;
		
		#region Constructors
        internal EventsManager(String connectionString)
		{
            this.connectionString = connectionString;
		}
		#endregion
		
		#region Methods

        /// <summary>
        /// Get event page
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="order">Sort query</param>
        /// <param name="page">Page index</param>
        /// <param name="size">Page size</param>
        /// <returns></returns>
        internal List<EventsEntity> List(String where, String order, Int32 page, Int32 size)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetEventsPage", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@page", page);
                cmd.Parameters.AddWithValue("@rowcount", size);
                cmd.Parameters.AddWithValue("@where", where);
                cmd.Parameters.AddWithValue("@orderby", order);

                con.Open();
                SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<EventsEntity> list = new List<EventsEntity>();
                while (reader.Read())
                {
                    EventsEntity events = new EventsEntity();
                    if (reader.GetValue(0) != DBNull.Value)
                        events.ComputerName = reader.GetString(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        events.EventName = reader.GetString(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        events.Color = reader.GetString(2);
                    if (reader.GetValue(3) != DBNull.Value)
                        events.ComponentName = reader.GetString(3);
                    if (reader.GetValue(4) != DBNull.Value)
                        events.EventTime = reader.GetDateTime(4);
                    if (reader.GetValue(5) != DBNull.Value)
                        events.Object = reader.GetString(5);
                    if (reader.GetValue(6) != DBNull.Value)
                        events.Comment = reader.GetString(6);
                    try
                    {
                        if (reader.GetValue(7) != DBNull.Value)
                            events.IPAddress = reader.GetString(7);
                        if (reader.GetValue(8) != DBNull.Value)
                            events.Description = reader.GetString(8);
                    }
                    catch
                    {
                        events.IPAddress = "-";
                        events.Description = "-";
                    }

                    list.Add(events);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get statistic list
        /// </summary>
        /// <param name="groupBy">GroupBy query</param>
        /// <param name="where">Filter query</param>
        /// <param name="size">Count statistics</param>
        /// <returns></returns>
        internal List<StatisticEntity> GetStatistics(String groupBy, String where, Int32 size)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetStatistics", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@where", where);
                cmd.Parameters.AddWithValue("@OrderBy", groupBy);

                con.Open();
                SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<StatisticEntity> list = new List<StatisticEntity>();
                Int32 i = 0;
                while (reader.Read())
                {
                    i++;
                    StatisticEntity stat = new StatisticEntity();
                    if (reader.GetValue(0) != DBNull.Value)
                        stat.Name = reader.GetString(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        stat.Count = reader.GetInt32(1);
                    list.Add(stat);
                    if (i == size) break;
                }

                reader.Close();
                return list;
            }
        }

		/// <summary>
		/// Get count of records with filter
		/// </summary>
		/// <param name="where">Filter query</param>
		/// <returns></returns>
        internal Int32 Count(String where)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetEventsCount", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@where", where);

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// Clear old events
        /// </summary>
        /// <param name="dt">Date</param>
        internal void ClearOldEvents(DateTime dt)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("DeleteOldEvents", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@Date", dt);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

		#endregion
	}		
}

