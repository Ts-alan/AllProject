using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the ComputersEntity object.
	/// </summary>
	public class ComputersManager
	{
	
		VlslVConnection database; 
		
		#region Constructors
		public ComputersManager()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public ComputersManager(VlslVConnection l_database)
		{
			database=l_database;
		}
		#endregion
		
		#region Methods
		
		/// <summary>
		/// Select entity from database with this id
		/// </summary>
		/// <param name="computersID">ID</param>
		/// <returns>id</returns>
		public ComputersEntity Get(Int16 computersID)
		{
			IDbCommand command=database.CreateCommand("GetComputer",true);
			
			database.AddCommandParameter(command,"@ID",
				DbType.Int16,(Int16)computersID,ParameterDirection.Input);
				
			ComputersEntity computers = new ComputersEntity();
			SqlDataReader reader=command.ExecuteReader() as SqlDataReader;
			
			if(reader.Read())
			{

                if (reader.GetValue(0) != DBNull.Value)
                    computers.ID = reader.GetInt16(0);
                if (reader.GetValue(1) != DBNull.Value)
                    computers.ComputerName = reader.GetString(1);
                if (reader.GetValue(2) != DBNull.Value)
                    computers.IPAddress = reader.GetString(2);
                if (reader.GetValue(3) != DBNull.Value)
                    computers.ControlCenter = reader.GetBoolean(3);
                if (reader.GetValue(4) != DBNull.Value)
                    computers.DomainName = reader.GetString(4);
                if (reader.GetValue(5) != DBNull.Value)
                    computers.UserLogin = reader.GetString(5);
                if (reader.GetValue(6) != DBNull.Value)
                    computers.OSTypeID = reader.GetInt16(6);
                if (reader.GetValue(7) != DBNull.Value)
                    computers.RAM = reader.GetInt16(7);
                if (reader.GetValue(8) != DBNull.Value)
                    computers.CPUClock = reader.GetInt16(8);
                if (reader.GetValue(9) != DBNull.Value)
                    computers.RecentActive = reader.GetDateTime(9);
                if (reader.GetValue(10) != DBNull.Value)
                    computers.LatestUpdate = reader.GetDateTime(10);
                if (reader.GetValue(11) != DBNull.Value)
                    computers.Vba32Version = reader.GetString(11);
                if (reader.GetValue(12) != DBNull.Value)
                    computers.LatestInfected = reader.GetDateTime(12);
                if (reader.GetValue(13) != DBNull.Value)
                    computers.LatestMalware = reader.GetString(13);
                if (reader.GetValue(14) != DBNull.Value)
                    computers.Vba32Integrity = reader.GetBoolean(14);
                if (reader.GetValue(15) != DBNull.Value)
                    computers.Vba32KeyValid = reader.GetBoolean(15);
                if (reader.GetValue(16) != DBNull.Value)
                    computers.Description = reader.GetString(16);
                if (reader.GetValue(17) != DBNull.Value)
                    computers.OSName = reader.GetString(17);
                if (reader.GetValue(18) != DBNull.Value)
                    computers.AdditionalInfo.ControlDeviceType = ControlDeviceTypeEnumExtensions.Get(reader.GetString(18));

			}
			reader.Close();
			return computers;
		}

        /// <summary>
		/// Delete entity from database with this id
		/// </summary>
		/// <param name="computersID">ID</param>
		/// <returns>id</returns>
        public void Delete(Int16 computersID)
        {
            IDbCommand command = database.CreateCommand("DeleteComputer", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (Int16)computersID, ParameterDirection.Input);

            command.ExecuteScalar();

        }

		/// <summary>
		/// Get page with sorting and filter
		/// </summary>
		/// <param name="where">where clause</param>
		/// <param name="order">order clause</param>
		/// <param name="page">page number</param>
		/// <param name="size">records per page</param>
		/// <returns></returns>
        public List<ComputersEntity> List(string where, string order, int page, int size)
		{
            IDbCommand command = database.CreateCommand("GetComputersPage", true);

			database.AddCommandParameter(command,"@page",
				DbType.Int16,(Int16)page,ParameterDirection.Input);

			database.AddCommandParameter(command,"@rowcount",
                DbType.Int16, (Int16)size, ParameterDirection.Input);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			database.AddCommandParameter(command,"@orderby",
				DbType.String,order,ParameterDirection.Input);

			
			SqlDataReader reader=command.ExecuteReader() as SqlDataReader;
            List<ComputersEntity> list = new List<ComputersEntity>();
			while(reader.Read())
			{
				ComputersEntity computers = new ComputersEntity();
                if (reader.GetValue(0) != DBNull.Value)
                    computers.ID = reader.GetInt16(0);
				if(reader.GetValue(1)!= DBNull.Value)
					computers.ComputerName = reader.GetString(1);
				if(reader.GetValue(2)!= DBNull.Value)
					computers.IPAddress = reader.GetString(2);
				if(reader.GetValue(3)!= DBNull.Value)
					computers.ControlCenter = reader.GetBoolean(3);
				if(reader.GetValue(4)!= DBNull.Value)
					computers.DomainName = reader.GetString(4);
				if(reader.GetValue(5)!= DBNull.Value)
					computers.UserLogin = reader.GetString(5);
				if(reader.GetValue(6)!= DBNull.Value)
					computers.OSName = reader.GetString(6);
				if(reader.GetValue(7)!= DBNull.Value)
					computers.RAM = reader.GetInt16(7);
				if(reader.GetValue(8)!= DBNull.Value)
					computers.CPUClock = reader.GetInt16(8);
				if(reader.GetValue(9)!= DBNull.Value)
					computers.RecentActive = reader.GetDateTime(9);
				if(reader.GetValue(10)!= DBNull.Value)
					computers.LatestUpdate = reader.GetDateTime(10);
				if(reader.GetValue(11)!= DBNull.Value)
					computers.Vba32Version = reader.GetString(11);
				if(reader.GetValue(12)!= DBNull.Value)
					computers.LatestInfected = reader.GetDateTime(12);
				if(reader.GetValue(13)!= DBNull.Value)
					computers.LatestMalware = reader.GetString(13);
				if(reader.GetValue(14)!= DBNull.Value)
					computers.Vba32Integrity = reader.GetBoolean(14);
				if(reader.GetValue(15)!= DBNull.Value)
					computers.Vba32KeyValid = reader.GetBoolean(15);
                if (reader.GetValue(16) != DBNull.Value)
                    computers.Description = reader.GetString(16);
                if (reader.GetValue(17) != DBNull.Value)
                    computers.AdditionalInfo.ControlDeviceType = ControlDeviceTypeEnumExtensions.Get(reader.GetString(17));
				list.Add(computers);
			}
			reader.Close();
			return list;			
		}

		/// <summary>
		/// Get count of records with filter
		/// </summary>
		/// <param name="where">where clause</param>
		/// <returns></returns>
		public int Count(string where)
		{

            IDbCommand command = database.CreateCommand("GetComputersCount", true);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			return (int)command.ExecuteScalar();
		}


        public void UpdateDescription(short id, string description)
        {
            IDbCommand command = database.CreateCommand("UpdateComputerDescription", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, id, ParameterDirection.Input);

            database.AddCommandParameter(command, "@Description",
                DbType.String, description, ParameterDirection.Input);


            command.ExecuteNonQuery();
        }

        public Int16 GetComputerID(string computerName)
        {
            IDbCommand command = database.CreateCommand("GetComputerIDWeb", true);

            database.AddCommandParameter(command, "@ComputerName",
                DbType.String, computerName, ParameterDirection.Input);

            command.CommandType = CommandType.StoredProcedure;

            object ret = command.ExecuteScalar();
            
            if (ret == null) return -1;
            else return (Int16)ret;
          
        }

        public ComputersEntity GetComputer(int id)
        {
            IDbCommand command = database.CreateCommand("GetComputer", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (short)id, ParameterDirection.Input);

            command.CommandType = CommandType.StoredProcedure;

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;
            ComputersEntity computers = new ComputersEntity();
            if (reader.Read())
            {

                if (reader.GetValue(0) != DBNull.Value)
                    computers.ID = reader.GetInt16(0);
                if (reader.GetValue(1) != DBNull.Value)
                    computers.ComputerName = reader.GetString(1);
                if (reader.GetValue(2) != DBNull.Value)
                    computers.IPAddress = reader.GetString(2);
                if (reader.GetValue(3) != DBNull.Value)
                    computers.ControlCenter = reader.GetBoolean(3);
                if (reader.GetValue(4) != DBNull.Value)
                    computers.DomainName = reader.GetString(4);
                if (reader.GetValue(5) != DBNull.Value)
                    computers.UserLogin = reader.GetString(5);
                if (reader.GetValue(6) != DBNull.Value)
                    computers.OSTypeID = reader.GetInt16(6);
                if (reader.GetValue(7) != DBNull.Value)
                    computers.RAM = reader.GetInt16(7);
                if (reader.GetValue(8) != DBNull.Value)
                    computers.CPUClock = reader.GetInt16(8);
                if (reader.GetValue(9) != DBNull.Value)
                    computers.RecentActive = reader.GetDateTime(9);
                if (reader.GetValue(10) != DBNull.Value)
                    computers.LatestUpdate = reader.GetDateTime(10);
                if (reader.GetValue(11) != DBNull.Value)
                    computers.Vba32Version = reader.GetString(11);
                if (reader.GetValue(12) != DBNull.Value)
                    computers.LatestInfected = reader.GetDateTime(12);
                if (reader.GetValue(13) != DBNull.Value)
                    computers.LatestMalware = reader.GetString(13);
                if (reader.GetValue(14) != DBNull.Value)
                    computers.Vba32Integrity = reader.GetBoolean(14);
                if (reader.GetValue(15) != DBNull.Value)
                    computers.Vba32KeyValid = reader.GetBoolean(15);
                if (reader.GetValue(16) != DBNull.Value)
                    computers.Description = reader.GetString(16);
            }

            return computers;
        }

        public List<string> GetRegisteredCompList(bool containIP)
        {
           

            IDbCommand command = database.CreateCommand(
                "SELECT [IPAddress] FROM Computers", false);

            //command.CommandType = CommandType.Text;

            SqlDataReader reader = (SqlDataReader)command.ExecuteReader();

            List<string> list = new List<string>();
            while (reader.Read())
            {
                if(reader.GetValue(0) != DBNull.Value)
                    list.Add(reader.GetString(0));               
            }


            return list;
        }

        public ComputersEntityEx GetComputerEx(Int16 computersID)
        {
            IDbCommand command = database.CreateCommand("GetComputerEx", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (Int16)computersID, ParameterDirection.Input);

            ComputersEntityEx computers = new ComputersEntityEx();
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            if (reader.Read())
            {

                if (reader.GetValue(0) != DBNull.Value)
                    computers.ID = reader.GetInt16(0);
                if (reader.GetValue(1) != DBNull.Value)
                    computers.ComputerName = reader.GetString(1);
                if (reader.GetValue(2) != DBNull.Value)
                    computers.IPAddress = reader.GetString(2);
                if (reader.GetValue(3) != DBNull.Value)
                    computers.ControlCenter = reader.GetBoolean(3);
                if (reader.GetValue(4) != DBNull.Value)
                    computers.DomainName = reader.GetString(4);
                if (reader.GetValue(5) != DBNull.Value)
                    computers.UserLogin = reader.GetString(5);
                if (reader.GetValue(6) != DBNull.Value)
                    computers.OSName = reader.GetString(6);
                if (reader.GetValue(7) != DBNull.Value)
                    computers.RAM = reader.GetInt16(7);
                if (reader.GetValue(8) != DBNull.Value)
                    computers.CPUClock = reader.GetInt16(8);
                if (reader.GetValue(9) != DBNull.Value)
                    computers.RecentActive = reader.GetDateTime(9);
                if (reader.GetValue(10) != DBNull.Value)
                    computers.LatestUpdate = reader.GetDateTime(10);
                if (reader.GetValue(11) != DBNull.Value)
                    computers.Vba32Version = reader.GetString(11);
                if (reader.GetValue(12) != DBNull.Value)
                    computers.LatestInfected = reader.GetDateTime(12);
                if (reader.GetValue(13) != DBNull.Value)
                    computers.LatestMalware = reader.GetString(13);
                if (reader.GetValue(14) != DBNull.Value)
                    computers.Vba32Integrity = reader.GetBoolean(14);
                if (reader.GetValue(15) != DBNull.Value)
                    computers.Vba32KeyValid = reader.GetBoolean(15);
                if (reader.GetValue(16) != DBNull.Value)
                    computers.Description = reader.GetString(16);
                if (reader.GetValue(17) != DBNull.Value)
                    computers.PolicyName = reader.GetString(17);
            }
            reader.Close();
            return computers;
        }
        public SelectedComputersForTask GetSelectionComputerForTask(String where)
        {
            if (where == "") where = null;
            IDbCommand command = database.CreateCommand("GetSelectionComputerForTask", true);

            database.AddCommandParameter(command, "@where",
                DbType.String, where, ParameterDirection.Input);

            SelectedComputersForTask selected;
            selected.Names = new List<string>();
            selected.IpAddresses = new List<string>();
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            while (reader.Read())
            {
                if (reader.GetValue(0) != DBNull.Value)
                    selected.Names.Add(reader.GetString(0));
                if (reader.GetValue(1) != DBNull.Value)
                    selected.IpAddresses.Add(reader.GetString(1));                
            }
            reader.Close();
            return selected;
        }
		#endregion
		
	}		
}

