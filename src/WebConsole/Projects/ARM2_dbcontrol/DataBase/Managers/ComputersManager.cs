using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the ComputersEntity object.
	/// </summary>
    internal sealed class ComputersManager
	{
		private VlslVConnection database; 
		
		#region Constructors
		public ComputersManager(VlslVConnection l_database)
		{
			database=l_database;
		}
		#endregion
		
		#region Methods

        /// <summary>
        /// Get computer from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static ComputersEntity GetComputerFromReader(IDataReader reader)
        {
            ComputersEntity comp = new ComputersEntity();
            if (reader.GetValue(0) != DBNull.Value)
                comp.ID = reader.GetInt16(0);

            if (reader.GetValue(1) != DBNull.Value)
                comp.ComputerName = reader.GetString(1);

            if (reader.GetValue(2) != DBNull.Value)
                comp.MacAddress = reader.GetString(2);

            if (reader.GetValue(3) != DBNull.Value)
                comp.IPAddress = reader.GetString(3);

            if (reader.GetValue(4) != DBNull.Value)
                comp.ControlCenter = reader.GetBoolean(4);

            if (reader.GetValue(5) != DBNull.Value)
                comp.DomainName = reader.GetString(5);

            if (reader.GetValue(6) != DBNull.Value)
                comp.UserLogin = reader.GetString(6);

            if (reader.GetValue(7) != DBNull.Value)
                comp.OSTypeID = reader.GetInt16(7);

            if (reader.GetValue(8) != DBNull.Value)
                comp.RAM = reader.GetInt16(8);

            if (reader.GetValue(9) != DBNull.Value)
                comp.CPUClock = reader.GetInt16(9);

            if (reader.GetValue(10) != DBNull.Value)
                comp.RecentActive = reader.GetDateTime(10);

            if (reader.GetValue(11) != DBNull.Value)
                comp.LatestUpdate = reader.GetDateTime(11);

            if (reader.GetValue(12) != DBNull.Value)
                comp.Vba32Version = reader.GetString(12);

            if (reader.GetValue(13) != DBNull.Value)
                comp.LatestInfected = reader.GetDateTime(13);

            if (reader.GetValue(14) != DBNull.Value)
                comp.LatestMalware = reader.GetString(14);

            if (reader.GetValue(15) != DBNull.Value)
                comp.Vba32Integrity = reader.GetBoolean(15);

            if (reader.GetValue(16) != DBNull.Value)
                comp.Vba32KeyValid = reader.GetBoolean(16);

            if (reader.GetValue(17) != DBNull.Value)
                comp.Description = reader.GetString(17);

            if (reader.GetValue(18) != DBNull.Value)
                comp.OSName = reader.GetString(18);

            if (reader.GetValue(19) != DBNull.Value)
                comp.AdditionalInfo.IsControllable = reader.GetBoolean(19);

            if (reader.GetValue(20) != DBNull.Value)
                comp.AdditionalInfo.IsRenamed = reader.GetBoolean(20);

            if (reader.GetValue(21) != DBNull.Value)
                comp.AdditionalInfo.PreviousComputerName = reader.GetString(21);

            if (reader.GetValue(22) != DBNull.Value)
                comp.AdditionalInfo.ControlDeviceType = ControlDeviceTypeEnumExtensions.Get(reader.GetString(22));

            return comp;
        }

        /// <summary>
        /// Get computers from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static List<ComputersEntity> GetComputersFromReader(IDataReader reader)
        {
            List<ComputersEntity> computers = new List<ComputersEntity>();

            while (reader.Read())
            {
                computers.Add(GetComputerFromReader(reader));
            }

            return computers;
        }

        /// <summary>
        /// Get computer extended from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static ComputersEntityEx GetComputerExFromReader(IDataReader reader)
        {
            Group group = new Group();
            Policy policy = new Policy();

            ComputersEntity comp = GetComputerFromReader(reader);
            if (reader.GetValue(23) != DBNull.Value)
                group.ID = reader.GetInt32(23);
            if (reader.GetValue(24) != DBNull.Value)
                group.Name = reader.GetString(24);
            if (reader.GetValue(25) != DBNull.Value)
                policy.ID = reader.GetInt32(25);
            if (reader.GetValue(26) != DBNull.Value)
                policy.Name = reader.GetString(26);

            return new ComputersEntityEx(comp, group, policy, null);
        }

        /// <summary>
        /// Get computers extended from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static List<ComputersEntityEx> GetComputersExFromReader(IDataReader reader)
        {
            List<ComputersEntityEx> computers = new List<ComputersEntityEx>();

            while (reader.Read())
            {
                computers.Add(GetComputerExFromReader(reader));
            }

            return computers;
        }

        /// <summary>
		/// Delete entity from database with this id
		/// </summary>
		/// <param name="computersID">ID</param>
		/// <returns>id</returns>
        internal void Delete(Int16 computersID)
        {
            IDbCommand command = database.CreateCommand("DeleteComputer", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (Int16)computersID, ParameterDirection.Input);

            command.ExecuteScalar();
        }

		/// <summary>
		/// Get page with sorting and filter
		/// </summary>
		/// <param name="where">where clause</param>
		/// <param name="order">order clause</param>
		/// <param name="page">page number</param>
		/// <param name="size">records per page</param>
		/// <returns></returns>
        internal List<ComputersEntity> List(String where, String order, Int32 page, Int32 size)
		{
            IDbCommand command = database.CreateCommand("GetComputersPage", true);

			database.AddCommandParameter(command,"@page",
				DbType.Int16,(Int16)page,ParameterDirection.Input);

			database.AddCommandParameter(command,"@rowcount",
                DbType.Int16, (Int16)size, ParameterDirection.Input);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			database.AddCommandParameter(command,"@orderby",
				DbType.String,order,ParameterDirection.Input);

			SqlDataReader reader=command.ExecuteReader() as SqlDataReader;
            List<ComputersEntity> list = GetComputersFromReader(reader);
			reader.Close();
			return list;			
		}

		/// <summary>
		/// Get count of records with filter
		/// </summary>
		/// <param name="where">where clause</param>
		/// <returns></returns>
        internal Int32 Count(String where)
		{
            IDbCommand command = database.CreateCommand("GetComputersCount", true);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			return (Int32)command.ExecuteScalar();
		}

        /// <summary>
        /// Get computer list
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="orderBy">Sort query</param>
        /// <returns></returns>
        internal List<ComputersEntity> GetComputers(String where, String orderBy)
        {
            IDbCommand command = database.CreateCommand("GetComputers", true);

            database.AddCommandParameter(command, "@Where",
                DbType.String, where, ParameterDirection.Input);

            database.AddCommandParameter(command, "@OrderBy",
                DbType.String, orderBy, ParameterDirection.Input);

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;
            List<ComputersEntity> list = GetComputersFromReader(reader);
            reader.Close();
            return list;
        }

        /// <summary>
        /// Get computer extended list without components
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="orderBy">Sort query</param>
        /// <returns></returns>
        internal List<ComputersEntityEx> GetComputersEx(String where, String orderBy)
        {
            IDbCommand command = database.CreateCommand("GetComputers", true);

            database.AddCommandParameter(command, "@Where",
                DbType.String, where, ParameterDirection.Input);

            database.AddCommandParameter(command, "@OrderBy",
                DbType.String, orderBy, ParameterDirection.Input);

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;
            List<ComputersEntityEx> list = GetComputersExFromReader(reader);
            reader.Close();
            return list;
        }

        /// <summary>
        /// Update computer's description
        /// </summary>
        /// <param name="id">Computer ID</param>
        /// <param name="description">New description</param>
        internal void UpdateDescription(Int16 id, String description)
        {
            IDbCommand command = database.CreateCommand("UpdateComputerDescription", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, id, ParameterDirection.Input);

            database.AddCommandParameter(command, "@Description",
                DbType.String, description, ParameterDirection.Input);


            command.ExecuteNonQuery();
        }

        /// <summary>
        /// Get computer ID by computer name
        /// </summary>
        /// <param name="computerName">Computer name</param>
        /// <returns>Computer ID. If computer wasn't existed return -1</returns>
        internal Int16 GetComputerID(String computerName)
        {
            IDbCommand command = database.CreateCommand("GetComputerIDWeb", true);

            database.AddCommandParameter(command, "@ComputerName",
                DbType.String, computerName, ParameterDirection.Input);

            command.CommandType = CommandType.StoredProcedure;

            Object ret = command.ExecuteScalar();
            
            if (ret == null) return -1;
            else return (Int16)ret;
        }

        /// <summary>
        /// Get computer by ID
        /// </summary>
        /// <param name="id">Computer ID</param>
        /// <returns>Computer entity</returns>
        internal ComputersEntity GetComputer(Int32 id)
        {
            IDbCommand command = database.CreateCommand("GetComputer", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (Int16)id, ParameterDirection.Input);

            ComputersEntity computer = null;
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            if (reader.Read())
            {
                computer = GetComputerFromReader(reader);
            }
            reader.Close();
            return computer;
        }

        /// <summary>
        /// Get list of IPAddresses
        /// </summary>
        /// <returns>List of IPAddresses</returns>
        internal List<String> GetRegisteredCompList()
        {
            IDbCommand command = database.CreateCommand(
                "SELECT [IPAddress] FROM Computers", false);

            SqlDataReader reader = (SqlDataReader)command.ExecuteReader();

            List<String> list = new List<String>();
            while (reader.Read())
            {
                if(reader.GetValue(0) != DBNull.Value)
                    list.Add(reader.GetString(0));               
            }

            return list;
        }

        /// <summary>
        /// Get extension version of computer entity by ID without components
        /// </summary>
        /// <param name="computersID">Computer ID</param>
        /// <returns>Extension version of computer entity</returns>
        internal ComputersEntityEx GetComputerEx(Int16 computersID)
        {
            IDbCommand command = database.CreateCommand("GetComputerEx", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, (Int16)computersID, ParameterDirection.Input);

            ComputersEntityEx computer = null;
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            if (reader.Read())
            {
                computer = GetComputerExFromReader(reader); 
            }
            reader.Close();
            return computer;
        }

        /// <summary>
        /// Get Names & IPAddresses for filtered computers
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <returns>Lists of Names & IPAddresses</returns>
        internal SelectedComputersForTask GetSelectionComputerForTask(String where)
        {
            if (String.IsNullOrEmpty(where)) 
                where = null;
            IDbCommand command = database.CreateCommand("GetSelectionComputerForTask", true);

            database.AddCommandParameter(command, "@where",
                DbType.String, where, ParameterDirection.Input);

            SelectedComputersForTask selected;
            selected.Names = new List<String>();
            selected.IpAddresses = new List<String>();
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            while (reader.Read())
            {
                if (reader.GetValue(0) != DBNull.Value)
                    selected.Names.Add(reader.GetString(0));
                if (reader.GetValue(1) != DBNull.Value)
                    selected.IpAddresses.Add(reader.GetString(1));                
            }
            reader.Close();
            return selected;
        }

        /// <summary>
        /// Clear old computers
        /// </summary>
        /// <param name="dt">Date</param>
        internal void ClearOldComputers(DateTime dt)
        {
            IDbCommand command = database.CreateCommand("DeleteOldComputers", true);

            if (DateTime.Now.Subtract(dt).Days > 0)
                database.AddCommandParameter(command, "@Date",
                    DbType.Date, dt, ParameterDirection.Input);

            command.ExecuteNonQuery();
        }

		#endregion
	}		
}

