using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ComputersEntity object.
    /// </summary>
    internal sealed class ComputersManager
    {
        private readonly String connectionString;
        private readonly DbProviderFactory factory;

        #region Constructors
        public ComputersManager(String connectionString):this(connectionString,"System.Data.SqlClient")
        {            
        }

        public ComputersManager(String connectionString,String DbFactoryName):this(connectionString,DbProviderFactories.GetFactory(DbFactoryName))
        {            
        }
        public ComputersManager(String connectionString, DbProviderFactory factory)
        {
            this.connectionString = connectionString;
            this.factory = factory;
            
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get computer from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static ComputersEntity GetComputerFromReader(IDataReader reader)
        {
            ComputersEntity comp = new ComputersEntity();
            if (reader.GetValue(0) != DBNull.Value)
                comp.ID = reader.GetInt16(0);

            if (reader.GetValue(1) != DBNull.Value)
                comp.ComputerName = reader.GetString(1);

            if (reader.GetValue(2) != DBNull.Value)
                comp.MacAddress = reader.GetString(2);

            if (reader.GetValue(3) != DBNull.Value)
                comp.IPAddress = reader.GetString(3);

            if (reader.GetValue(4) != DBNull.Value)
                comp.ControlCenter = reader.GetBoolean(4);

            if (reader.GetValue(5) != DBNull.Value)
                comp.DomainName = reader.GetString(5);

            if (reader.GetValue(6) != DBNull.Value)
                comp.UserLogin = reader.GetString(6);

            if (reader.GetValue(7) != DBNull.Value)
                comp.OSTypeID = reader.GetInt16(7);

            if (reader.GetValue(8) != DBNull.Value)
                comp.RAM = reader.GetInt16(8);

            if (reader.GetValue(9) != DBNull.Value)
                comp.CPUClock = reader.GetInt16(9);

            if (reader.GetValue(10) != DBNull.Value)
                comp.RecentActive = reader.GetDateTime(10);

            if (reader.GetValue(11) != DBNull.Value)
                comp.LatestUpdate = reader.GetDateTime(11);

            if (reader.GetValue(12) != DBNull.Value)
                comp.Vba32Version = reader.GetString(12);

            if (reader.GetValue(13) != DBNull.Value)
                comp.LatestInfected = reader.GetDateTime(13);

            if (reader.GetValue(14) != DBNull.Value)
                comp.LatestMalware = reader.GetString(14);

            if (reader.GetValue(15) != DBNull.Value)
                comp.Vba32Integrity = reader.GetBoolean(15);

            if (reader.GetValue(16) != DBNull.Value)
                comp.Vba32KeyValid = reader.GetBoolean(16);

            if (reader.GetValue(17) != DBNull.Value)
                comp.Description = reader.GetString(17);

            if (reader.GetValue(18) != DBNull.Value)
                comp.OSName = reader.GetString(18);

            if (reader.GetValue(19) != DBNull.Value)
                comp.AdditionalInfo.IsControllable = reader.GetBoolean(19);

            if (reader.GetValue(20) != DBNull.Value)
                comp.AdditionalInfo.IsRenamed = reader.GetBoolean(20);

            if (reader.GetValue(21) != DBNull.Value)
                comp.AdditionalInfo.PreviousComputerName = reader.GetString(21);

            if (reader.GetValue(22) != DBNull.Value)
                comp.AdditionalInfo.ControlDeviceType = ControlDeviceTypeEnumExtensions.Get(reader.GetString(22));

            return comp;
        }

        /// <summary>
        /// Get computers from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static List<ComputersEntity> GetComputersFromReader(IDataReader reader)
        {
            List<ComputersEntity> computers = new List<ComputersEntity>();

            while (reader.Read())
            {
                computers.Add(GetComputerFromReader(reader));
            }

            return computers;
        }

        /// <summary>
        /// Get computer extended from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static ComputersEntityEx GetComputerExFromReader(IDataReader reader)
        {
            Group group = new Group();
            Policy policy = new Policy();

            ComputersEntity comp = GetComputerFromReader(reader);
            if (reader.GetValue(23) != DBNull.Value)
                group.ID = reader.GetInt32(23);
            if (reader.GetValue(24) != DBNull.Value)
                group.Name = reader.GetString(24);
            if (reader.GetValue(25) != DBNull.Value)
                policy.ID = reader.GetInt16(25);
            if (reader.GetValue(26) != DBNull.Value)
                policy.Name = reader.GetString(26);

            return new ComputersEntityEx(comp, group, policy, null);
        }

        /// <summary>
        /// Get computers extended from SqlDataReader
        /// </summary>
        /// <param name="reader"></param>
        /// <returns></returns>
        internal static List<ComputersEntityEx> GetComputersExFromReader(IDataReader reader)
        {
            List<ComputersEntityEx> computers = new List<ComputersEntityEx>();

            while (reader.Read())
            {
                computers.Add(GetComputerExFromReader(reader));
            }

            return computers;
        }

        /// <summary>
        /// Delete entity from database with this id
        /// </summary>
        /// <param name="computersID">ID</param>
        /// <returns>id</returns>
        internal void Delete(Int16 computersID)
        {

            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;
                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "DeleteComputer";

              
                IDbDataParameter param= cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = computersID;
                cmd.Parameters.Add(param);
                

                con.Open();
                cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// Get page with sorting and filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <param name="order">order clause</param>
        /// <param name="page">page number</param>
        /// <param name="size">records per page</param>
        /// <returns></returns>
        internal List<ComputersEntity> List(String where, String order, Int16 page, Int16 size)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputersPage";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@page";
                param.Value = page;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@rowcount";
                param.Value = size;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@orderby";
                param.Value = order;
                cmd.Parameters.Add(param);

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComputersEntity> list = GetComputersFromReader(reader);
                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get count of records with filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <returns></returns>
        internal Int32 Count(String where)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputersCount";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);
               

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }

        /// <summary>
        /// Get computer list
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="orderBy">Sort query</param>
        /// <returns></returns>
        internal List<ComputersEntity> GetComputers(String where, String orderBy)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputers";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@Where";
                param.Value = where;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@OrderBy";
                param.Value = orderBy;
                cmd.Parameters.Add(param);
               
                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComputersEntity> list = GetComputersFromReader(reader);
                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get computer extended list without components
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="orderBy">Sort query</param>
        /// <returns></returns>
        internal List<ComputersEntityEx> GetComputersEx(String where, String orderBy)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputers";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@Where";
                param.Value = where;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@OrderBy";
                param.Value = orderBy;
                cmd.Parameters.Add(param);

                

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ComputersEntityEx> list = GetComputersExFromReader(reader);
                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Update computer's description
        /// </summary>
        /// <param name="id">Computer ID</param>
        /// <param name="description">New description</param>
        internal void UpdateDescription(Int16 id, String description)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateComputerDescription";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = id;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@Description";
                param.Value = description;
                cmd.Parameters.Add(param);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Get computer ID by computer name
        /// </summary>
        /// <param name="computerName">Computer name</param>
        /// <returns>Computer ID. If computer wasn't existed return -1</returns>
        internal Int16 GetComputerID(String computerName)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputersIDWeb";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ComputerName";
                param.Value = computerName;
                cmd.Parameters.Add(param);

                con.Open();
                Object ret = cmd.ExecuteScalar();

                if (ret == null) return -1;
                else return (Int16)ret;
            }
        }

        /// <summary>
        /// Get computer by ID
        /// </summary>
        /// <param name="id">Computer ID</param>
        /// <returns>Computer entity</returns>
        internal ComputersEntity GetComputer(Int16 id)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputer";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = id;
                cmd.Parameters.Add(param);

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                ComputersEntity computer = null;
                if (reader.Read())
                {
                    computer = GetComputerFromReader(reader);
                }
                reader.Close();
                return computer;
            }
        }

        /// <summary>
        /// Get list of IPAddresses
        /// </summary>
        /// <returns>List of IPAddresses</returns>
        internal List<String> GetRegisteredCompList()
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandText="SELECT [IPAddress] FROM Computers";

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<String> list = new List<String>();
                while (reader.Read())
                {
                    if (reader.GetValue(0) != DBNull.Value)
                        list.Add(reader.GetString(0));
                }
                reader.Close();

                return list;
            }
        }

        /// <summary>
        /// Get extension version of computer entity by ID without components
        /// </summary>
        /// <param name="computersID">Computer ID</param>
        /// <returns>Extension version of computer entity</returns>
        internal ComputersEntityEx GetComputerEx(Int16 computersID)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetComputer";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = computersID;
                cmd.Parameters.Add(param);
              

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                ComputersEntityEx computer = null;
                if (reader.Read())
                {
                    computer = GetComputerExFromReader(reader);
                }
                reader.Close();
                return computer;
            }
        }

        /// <summary>
        /// Get Names & IPAddresses for filtered computers
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <returns>Lists of Names & IPAddresses</returns>
        internal SelectedComputersForTask GetSelectionComputerForTask(String where)
        {
            if (String.IsNullOrEmpty(where))
                where = null;

            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetSelectionComputerForTask";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                SelectedComputersForTask selected;
                selected.Names = new List<String>();
                selected.IpAddresses = new List<String>();
                while (reader.Read())
                {
                    if (reader.GetValue(0) != DBNull.Value)
                        selected.Names.Add(reader.GetString(0));
                    if (reader.GetValue(1) != DBNull.Value)
                        selected.IpAddresses.Add(reader.GetString(1));
                }
                reader.Close();
                return selected;
            }
        }

        /// <summary>
        /// Clear old computers
        /// </summary>
        /// <param name="dt">Date</param>
        internal void ClearOldComputers(DateTime dt)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "DeleteOldComputers";

                if (DateTime.Now.Subtract(dt).Days > 0)
                {
                    IDbDataParameter param = cmd.CreateParameter();
                    param.ParameterName = "@Date";
                    param.Value = dt;
                    cmd.Parameters.Add(param);
                }

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        #endregion
    }
}