using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the OSTypesEntity object.
    /// </summary>
    internal sealed class OSTypesManager
    {
        private readonly String connectionString;
        private readonly DbProviderFactory factory;

        #region Constructors
        public OSTypesManager(String connectionString):this(connectionString,"System.Data.SqlClient")
        {            
        }

        public OSTypesManager(String connectionString,String DbFactoryName):this(connectionString,DbProviderFactories.GetFactory(DbFactoryName))
        {            
        }
        public OSTypesManager(String connectionString, DbProviderFactory factory)
        {
            this.connectionString = connectionString;
            this.factory = factory;
            
        }
        #endregion

        #region Methods
        /// <summary>
        /// Return all values from table 
        /// </summary>
        /// <returns>Result command</returns>
        internal List<OSTypesEntity> List()
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetOSTypesList";
               
                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<OSTypesEntity> list = new List<OSTypesEntity>();
                while (reader.Read())
                {
                    OSTypesEntity oSTypes = new OSTypesEntity();
                    oSTypes.ID = reader.GetInt16(0);
                    oSTypes.OSName = reader.GetString(1);
                    list.Add(oSTypes);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Select OSName from database with this id
        /// </summary>
        /// <param name="oSTypesID">ID</param>
        /// <returns>id</returns>
        internal string GetOSName(Int16 oSTypesID)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetOSName";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = oSTypesID;
                cmd.Parameters.Add(param);

                con.Open();
                return Convert.ToString(cmd.ExecuteScalar());
            }
        }

        #endregion
    }
}