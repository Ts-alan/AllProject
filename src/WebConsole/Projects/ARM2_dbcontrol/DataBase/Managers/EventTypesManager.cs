using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the EventTypesEntity object.
	/// </summary>
    internal sealed class EventTypesManager
	{
        private readonly String connectionString;
		private readonly DbProviderFactory factory;

        #region Constructors
        public EventTypesManager(String connectionString):this(connectionString,"System.Data.SqlClient")
        {            
        }

        public EventTypesManager(String connectionString,String DbFactoryName):this(connectionString,DbProviderFactories.GetFactory(DbFactoryName))
        {            
        }
        public EventTypesManager(String connectionString, DbProviderFactory factory)
        {
            this.connectionString = connectionString;
            this.factory = factory;
            
        }
        #endregion
		
		#region Methods

        /// <summary>
		/// Update color of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
        internal void UpdateColor(EventTypesEntity eventTypes)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateEventColor";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = eventTypes.ID;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@Color";
                param.Value = eventTypes.Color;
                cmd.Parameters.Add(param);
               
                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
		/// Update 'send' field of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
        internal void UpdateSend(EventTypesEntity eventTypes)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateEventSend";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = eventTypes.ID;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@Send";
                param.Value = eventTypes.Send;
                cmd.Parameters.Add(param);
               
                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update 'send' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        internal void UpdateNoDelete(EventTypesEntity eventTypes)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateEventNoDelete";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = eventTypes.ID;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@NoDelete";
                param.Value = eventTypes.NoDelete;
                cmd.Parameters.Add(param);
               
                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update 'notify' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        internal void UpdateNotify(EventTypesEntity eventTypes)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "UpdateEventNotify";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@ID";
                param.Value = eventTypes.ID;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@Notify";
                param.Value = eventTypes.Notify;
                cmd.Parameters.Add(param);
               
                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Get event type page
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="order">Sort query</param>
        /// <param name="page">Page index</param>
        /// <param name="size">Page size</param>
        /// <returns></returns>
        internal List<EventTypesEntity> List(String where, String order, Int16 page, Int16 size)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetEventTypesPage";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@page";
                param.Value = page;
                cmd.Parameters.Add(param);

                param = cmd.CreateParameter();
                param.ParameterName = "@rowcount";
                param.Value = size;
                cmd.Parameters.Add(param);
               
                param=cmd.CreateParameter();
                param.ParameterName="@where";
                param.Value=where;
                cmd.Parameters.Add(param);

                param=cmd.CreateParameter();
                param.ParameterName="@orderby";
                param.Value=order;
                cmd.Parameters.Add(param);

                con.Open();
                IDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<EventTypesEntity> list = new List<EventTypesEntity>();
                while (reader.Read())
                {
                    EventTypesEntity eventTypes = new EventTypesEntity();
                    if (reader.GetValue(0) != DBNull.Value)
                        eventTypes.ID = reader.GetInt16(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        eventTypes.EventName = reader.GetString(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        eventTypes.Color = reader.GetString(2);
                    if (reader.GetValue(3) != DBNull.Value)
                        eventTypes.Send = reader.GetBoolean(3);
                    if (reader.GetValue(4) != DBNull.Value)
                        eventTypes.NoDelete = reader.GetBoolean(4);
                    if (reader.GetValue(5) != DBNull.Value)
                        eventTypes.Notify = reader.GetBoolean(5);
                    list.Add(eventTypes);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get count of event types
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <returns>Count of event types</returns>
        internal Int32 Count(String where)
        {
            using (IDbConnection con = factory.CreateConnection())
            {
                con.ConnectionString = connectionString;

                IDbCommand cmd = factory.CreateCommand();
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "GetEventTypesCount";

                IDbDataParameter param = cmd.CreateParameter();
                param.ParameterName = "@where";
                param.Value = where;
                cmd.Parameters.Add(param);

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }
        		
		#endregion				
	}		
}

