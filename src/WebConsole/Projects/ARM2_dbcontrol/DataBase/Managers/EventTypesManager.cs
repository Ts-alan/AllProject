using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the EventTypesEntity object.
	/// </summary>
	public class EventTypesManager
	{
	
		VlslVConnection database; 
		
		#region Constructors
		public EventTypesManager()
		{
			//
			// TODO: Add constructor logic here
			//
		}
		public EventTypesManager(VlslVConnection l_database)
		{
			database=l_database;
		}
		#endregion
		
		#region Methods

        /// <summary>
		/// Update color of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
		public void UpdateColor(EventTypesEntity eventTypes)
		{
            IDbCommand command = database.CreateCommand("UpdateEventColor", true);
			
			database.AddCommandParameter(command,"@ID",
				DbType.Int16,eventTypes.ID,ParameterDirection.Input);	
			
			database.AddCommandParameter(command,"@Color",
				DbType.String,eventTypes.Color,ParameterDirection.Input);	
			
			command.ExecuteNonQuery();
		}

        /// <summary>
		/// Update 'send' field of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
        public void UpdateSend(EventTypesEntity eventTypes)
        {
            IDbCommand command = database.CreateCommand("UpdateEventSend", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, eventTypes.ID, ParameterDirection.Input);

            database.AddCommandParameter(command, "@Send",
                DbType.Boolean, eventTypes.Send, ParameterDirection.Input);

            command.ExecuteNonQuery();
        }

        /// <summary>
        /// Update 'send' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        public void UpdateNoDelete(EventTypesEntity eventTypes)
        {
            IDbCommand command = database.CreateCommand("UpdateEventNoDelete", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, eventTypes.ID, ParameterDirection.Input);

            database.AddCommandParameter(command, "@NoDelete",
                DbType.Boolean, eventTypes.NoDelete, ParameterDirection.Input);

            command.ExecuteNonQuery();
        }

        /// <summary>
        /// Update 'notify' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        public void UpdateNotify(EventTypesEntity eventTypes)
        {
            IDbCommand command = database.CreateCommand("UpdateEventNotify", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int16, eventTypes.ID, ParameterDirection.Input);

            database.AddCommandParameter(command, "@Notify",
                DbType.Boolean, eventTypes.Notify, ParameterDirection.Input);

            command.ExecuteNonQuery();
        }

        public List<EventTypesEntity> List(string where, string order, int page, int size)
		{
            IDbCommand command = database.CreateCommand("GetEventTypesPage", true);

			database.AddCommandParameter(command,"@page",
				DbType.Int16,(Int16)page,ParameterDirection.Input);

			database.AddCommandParameter(command,"@rowcount",
                DbType.Int16, (Int16)size, ParameterDirection.Input);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);

			database.AddCommandParameter(command,"@orderby",
				DbType.String,order,ParameterDirection.Input);


			SqlDataReader reader=command.ExecuteReader() as SqlDataReader;
            List<EventTypesEntity> list = new List<EventTypesEntity>();
			while(reader.Read())
			{
				EventTypesEntity eventTypes = new EventTypesEntity();
                if (reader.GetValue(0) != DBNull.Value)
                    eventTypes.ID = reader.GetInt16(0);
				if(reader.GetValue(1)!= DBNull.Value)
					eventTypes.EventName = reader.GetString(1);
				if(reader.GetValue(2)!= DBNull.Value)
					eventTypes.Color = reader.GetString(2);
                if (reader.GetValue(3) != DBNull.Value)
                    eventTypes.Send = reader.GetBoolean(3);
                if (reader.GetValue(4) != DBNull.Value)
                    eventTypes.NoDelete = reader.GetBoolean(4);
                if (reader.GetValue(5) != DBNull.Value)
                    eventTypes.Notify = reader.GetBoolean(5);
				list.Add(eventTypes);		
			}
			
			reader.Close();
			return list;
			
		}

		public int Count(string where)
		{

            IDbCommand command = database.CreateCommand("GetEventTypesCount", true);

			database.AddCommandParameter(command,"@where",
				DbType.String,where,ParameterDirection.Input);


			return (int)command.ExecuteScalar();
		}

		
		#endregion
				
	}		
}

