using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
	/// <summary>
	/// IMPORTANT: This class should never be manually edited.
	/// Generated by VlslV CodeSmith Template.
	/// This class is used to manage the EventTypesEntity object.
	/// </summary>
    internal sealed class EventTypesManager
	{
        private readonly String connectionString;
		
		#region Constructors
        public EventTypesManager(String connectionString)
		{
            this.connectionString = connectionString;
		}
		#endregion
		
		#region Methods

        /// <summary>
		/// Update color of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
        internal void UpdateColor(EventTypesEntity eventTypes)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("UpdateEventColor", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", eventTypes.ID);
                cmd.Parameters.AddWithValue("@Color", eventTypes.Color);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
		/// Update 'send' field of event in database
		/// </summary>
		/// <param name="eventTypes">entity to update</param>
        internal void UpdateSend(EventTypesEntity eventTypes)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("UpdateEventSend", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", eventTypes.ID);
                cmd.Parameters.AddWithValue("@Send", eventTypes.Send);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update 'send' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        internal void UpdateNoDelete(EventTypesEntity eventTypes)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("UpdateEventNoDelete", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", eventTypes.ID);
                cmd.Parameters.AddWithValue("@NoDelete", eventTypes.NoDelete);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update 'notify' field of event in database
        /// </summary>
        /// <param name="eventTypes">entity to update</param>
        internal void UpdateNotify(EventTypesEntity eventTypes)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("UpdateEventNotify", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@ID", eventTypes.ID);
                cmd.Parameters.AddWithValue("@Notify", eventTypes.Notify);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Get event type page
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="order">Sort query</param>
        /// <param name="page">Page index</param>
        /// <param name="size">Page size</param>
        /// <returns></returns>
        internal List<EventTypesEntity> List(String where, String order, Int16 page, Int16 size)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetEventTypesPage", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@page", page);
                cmd.Parameters.AddWithValue("@rowcount", size);
                cmd.Parameters.AddWithValue("@where", where);
                cmd.Parameters.AddWithValue("@orderby", order);

                con.Open();
                SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<EventTypesEntity> list = new List<EventTypesEntity>();
                while (reader.Read())
                {
                    EventTypesEntity eventTypes = new EventTypesEntity();
                    if (reader.GetValue(0) != DBNull.Value)
                        eventTypes.ID = reader.GetInt16(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        eventTypes.EventName = reader.GetString(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        eventTypes.Color = reader.GetString(2);
                    if (reader.GetValue(3) != DBNull.Value)
                        eventTypes.Send = reader.GetBoolean(3);
                    if (reader.GetValue(4) != DBNull.Value)
                        eventTypes.NoDelete = reader.GetBoolean(4);
                    if (reader.GetValue(5) != DBNull.Value)
                        eventTypes.Notify = reader.GetBoolean(5);
                    list.Add(eventTypes);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get count of event types
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <returns>Count of event types</returns>
        internal Int32 Count(String where)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetEventTypesCount", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@where", where);

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }
        		
		#endregion				
	}		
}

