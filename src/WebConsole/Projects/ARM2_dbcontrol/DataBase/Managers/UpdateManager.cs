using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ComponentEntity object.
    /// </summary>
    internal sealed class UpdateManager
    {
        private readonly String connectionString;

        #region Constructors
        public UpdateManager(String connectionString)
        {
            this.connectionString = connectionString;
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get last update entity
        /// </summary>
        /// <param name="state">state</param>
        /// <returns></returns>
        internal UpdateEntity GetLast(UpdateStateEnum state)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLastUpdate", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@State", state.ToString());

                con.Open();
                SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                UpdateEntity ent = new UpdateEntity();
                if (reader.Read())
                {
                    if (reader.GetValue(0) != DBNull.Value)
                        ent.BuildID = reader.GetString(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        ent.DeployDatetime = reader.GetDateTime(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        ent.State = UpdateStateEnumExtensions.Get(reader.GetString(2));
                    if (reader.GetValue(3) != DBNull.Value)
                        ent.Description = reader.GetString(3);
                }
                reader.Close();
                return (ent.DeployDatetime == DateTime.MinValue) ? null : ent;
            }
        }

        /// <summary>
        /// Insert new update entity
        /// </summary>
        internal void InsertUpdate()
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("InsertUpdate", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@State", UpdateStateEnum.Processing.ToString());

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// Update fields for processing entity
        /// </summary>
        /// <param name="ent"></param>
        internal void Update(UpdateEntity ent)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("UpdateInsertedUpdate", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@BuildId", ent.BuildID);
                cmd.Parameters.AddWithValue("@DeployDatetime", ent.DeployDatetime);
                cmd.Parameters.AddWithValue("@State", ent.State.ToString());
                cmd.Parameters.AddWithValue("@Description", ent.Description);

                con.Open();
                cmd.ExecuteNonQuery();
            }
        }

        #endregion
    }
}
