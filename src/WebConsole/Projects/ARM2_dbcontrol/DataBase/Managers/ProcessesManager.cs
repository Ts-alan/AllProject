using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ProcessesEntity object.
    /// </summary>
    internal sealed class ProcessesManager
    {
        private VlslVConnection database;

        #region Constructors
        public ProcessesManager(VlslVConnection l_database)
        {
            database = l_database;
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get process page
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="order">Sort query</param>
        /// <param name="page">Page index</param>
        /// <param name="size">Page size</param>
        /// <returns></returns>
        internal List<ProcessesEntity> List(String where, String order, Int32 page, Int32 size)
        {
            IDbCommand command = database.CreateCommand("GetProcessesPage", true);

            database.AddCommandParameter(command, "@page",
                DbType.Int32, (Int32)page, ParameterDirection.Input);

            database.AddCommandParameter(command, "@rowcount",
                DbType.Int32, (Int32)size, ParameterDirection.Input);

            database.AddCommandParameter(command, "@where",
                DbType.String, where, ParameterDirection.Input);

            database.AddCommandParameter(command, "@orderby",
                DbType.String, order, ParameterDirection.Input);

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;
            List<ProcessesEntity> list = new List<ProcessesEntity>();
            while (reader.Read())
            {
                ProcessesEntity process = new ProcessesEntity();
                if (reader.GetValue(0) != DBNull.Value)
                    process.ComputerName = reader.GetString(0);
                if (reader.GetValue(1) != DBNull.Value)
                    process. ProcessName= reader.GetString(1);
                if (reader.GetValue(2) != DBNull.Value)
                    process.MemorySize = reader.GetInt32(2);
                if (reader.GetValue(3) != DBNull.Value)
                    process.LastDate = reader.GetDateTime(3);


                list.Add(process);
            }

            reader.Close();
            return list;
        }

        /// <summary>
        /// Get count of records with filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <returns></returns>
        internal Int32 Count(String where)
        {
            IDbCommand command = database.CreateCommand("GetProcessesCount", true);

            database.AddCommandParameter(command, "@where",
                DbType.String, where, ParameterDirection.Input);

            return (Int32)command.ExecuteScalar();
        }

        #endregion
    }
}