using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;

namespace VirusBlokAda.CC.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the ProcessesEntity object.
    /// </summary>
    internal sealed class ProcessesManager
    {
        private readonly String connectionString;

        #region Constructors
        public ProcessesManager(String connectionString)
        {
            this.connectionString = connectionString;
        }
        #endregion

        #region Methods

        /// <summary>
        /// Get process page
        /// </summary>
        /// <param name="where">Filter query</param>
        /// <param name="order">Sort query</param>
        /// <param name="page">Page index</param>
        /// <param name="size">Page size</param>
        /// <returns></returns>
        internal List<ProcessesEntity> List(String where, String order, Int32 page, Int32 size)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetProcessesPage", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@page", page);
                cmd.Parameters.AddWithValue("@rowcount", size);
                cmd.Parameters.AddWithValue("@where", where);
                cmd.Parameters.AddWithValue("@orderby", order);

                con.Open();
                SqlDataReader reader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
                List<ProcessesEntity> list = new List<ProcessesEntity>();
                while (reader.Read())
                {
                    ProcessesEntity process = new ProcessesEntity();
                    if (reader.GetValue(0) != DBNull.Value)
                        process.ComputerName = reader.GetString(0);
                    if (reader.GetValue(1) != DBNull.Value)
                        process.ProcessName = reader.GetString(1);
                    if (reader.GetValue(2) != DBNull.Value)
                        process.MemorySize = reader.GetInt32(2);
                    if (reader.GetValue(3) != DBNull.Value)
                        process.LastDate = reader.GetDateTime(3);

                    list.Add(process);
                }

                reader.Close();
                return list;
            }
        }

        /// <summary>
        /// Get count of records with filter
        /// </summary>
        /// <param name="where">where clause</param>
        /// <returns></returns>
        internal Int32 Count(String where)
        {
            using (SqlConnection con = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetProcessesCount", con);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@where", where);

                con.Open();
                return (Int32)cmd.ExecuteScalar();
            }
        }

        #endregion
    }
}