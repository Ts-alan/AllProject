using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Collections.Generic;
using Vba32.ControlCenter.PeriodicalMaintenanceService.DataBase;
using Vba32.ControlCenter.PeriodicalMaintenanceService.TaskAssignment.Entities;

namespace Vba32.ControlCenter.PeriodicalMaintenanceService.TaskAssignment.DataBase
{
    /// <summary>
    /// IMPORTANT: This class should never be manually edited.
    /// Generated by VlslV CodeSmith Template.
    /// This class is used to manage the TaskEntity object.
    /// </summary>
    public class TaskManager
    {

        VlslVConnection database;

        #region Constructors
        public TaskManager()
        {
            //
            // TODO: Add constructor logic here
            //
        }
        public TaskManager(VlslVConnection l_database)
        {
            database = l_database;
        }
        #endregion

        #region Methods

        /// <summary>
        /// Create task and return taskID
        /// </summary>
        /// <param name="computerName"></param>
        /// <param name="taskName"></param>
        /// <param name="taskParams"></param>
        /// <returns></returns>
        public Object CreateTask(String computerName, String taskName, String taskParams, String taskUser)
        {
            IDbCommand command = database.CreateCommand("CreateTask", true);

            database.AddCommandParameter(command, "@ComputerName",
                DbType.String, computerName, ParameterDirection.Input);

            database.AddCommandParameter(command, "@TaskName",
                DbType.String, taskName, ParameterDirection.Input);

            database.AddCommandParameter(command, "@TaskParams",
                DbType.String, taskParams, ParameterDirection.Input);
            database.AddCommandParameter(command, "@TaskUser",
                DbType.String, taskUser, ParameterDirection.Input);

            return command.ExecuteScalar();
        }

        /// <summary>
        /// Select entity from database with this id
        /// </summary>
        /// <param name="computersID">ID</param>
        /// <returns>id</returns>
        public TaskEntity Get(Int64 tasksID)
        {
            IDbCommand command = database.CreateCommand("GetTaskByID", true);

            database.AddCommandParameter(command, "@ID",
                DbType.Int64, (Int64)tasksID, ParameterDirection.Input);

            TaskEntity task = new TaskEntity();
            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            if (reader.Read())
            {
                if (reader.GetValue(0) != DBNull.Value)
                    task.ID = reader.GetInt64(0);
                if (reader.GetValue(5) != DBNull.Value)
                    task.TaskParams = reader.GetString(5);
                if (reader.GetValue(6) != DBNull.Value)
                    task.TaskName = reader.GetString(6);
                if (reader.GetValue(7) != DBNull.Value)
                    task.TaskUser = reader.GetString(7);
            }
            reader.Close();
            return task;
        }
        
        /// <summary>
        /// Get IPAddress list for configure agent
        /// </summary>
        /// <returns></returns>
        public List<String> GetIPAddressListForConfigure()
        {
            IDbCommand command = database.CreateCommand("GetIPAddressListForConfigure", true);

            SqlDataReader reader = command.ExecuteReader() as SqlDataReader;

            List<String> list = new List<String>();
            while (reader.Read())
            {
                if (reader.GetValue(0) != DBNull.Value)
                    list.Add(reader.GetString(0));
            }
            reader.Close();

            return list;
        }

        #endregion
    }
}

